import os
import unittest
import tempfile
from unittest.mock import MagicMock, patch
import pandas as pd
from ragas.testset import Testset

from docu_bot.document_loaders.git_document_loader import GitDocumentLoader
from docu_bot.document_loaders.zip_document_loader import ZipDocumentLoader
from docu_bot.document_loaders.utils import LoadedRepositoriesAndFiles
from docu_bot.retrievals.document_retrival import DocumentRetrieval
from docu_bot.retrievals.empty_retrieval import EmptyRetrieval
from docu_bot.retrievals.query_alteration_retrieval import (
    QueryAlterationDocumentRetrieval,
)
from docu_bot.stores.utils import (
    LoadedVectorStores,
)
from docu_bot.stores.docstore import DocumentStore
from docu_bot.stores.vectorstore import MultiVectorStore
from docu_bot.evaluation.evaluate import Evaluator
from docu_bot.chat.answer_openai import (
    prepare_retriever,
    get_documents,
    rag,
    RETRIEVAL_TYPES,
)

from langchain_core.documents import Document
from langchain_openai import ChatOpenAI, OpenAIEmbeddings

# TODO: Autogenerated test cases. Need to be reviewed and updated.


class TestDocumentLoaders(unittest.TestCase):
    """Test document loader components"""

    def setUp(self):
        self.loaded_repos = LoadedRepositoriesAndFiles()

    @patch(
        "docu_bot.document_loaders.git_document_loader.GitDocumentLoader._clone_repo"
    )
    @patch(
        "docu_bot.document_loaders.git_document_loader.GitDocumentLoader._load_files_from_repo"
    )
    def test_git_document_loader(self, mock_load_files, mock_clone_repo):
        # Set up mock return values
        mock_load_files.return_value = [
            Document(
                page_content="Test content",
                metadata={"source": "git", "ItemId": "test_repo/test_file.md"},
            )
        ]

        # Test loading documents from a git repository
        loader = GitDocumentLoader(
            repo_path="https://github.com/test/repo.git",
            branch="master",
            loaded_repositories_and_files=self.loaded_repos,
        )
        documents = loader.load()

        # Assertions
        self.assertEqual(len(documents), 1)
        self.assertEqual(documents[0].page_content, "Test content")
        self.assertEqual(documents[0].metadata["source"], "git")
        self.assertEqual(documents[0].metadata["ItemId"], "test_repo/test_file.md")
        mock_clone_repo.assert_called_once()
        mock_load_files.assert_called_once()

    def test_zip_document_loader(self):
        # Create a temporary file for testing
        with tempfile.NamedTemporaryFile(suffix=".txt", delete=False) as temp_file:
            temp_file.write(b"Test zip content")
            temp_path = temp_file.name

        try:
            # Test loading documents from a file
            loader = ZipDocumentLoader(
                temp_file=temp_path, loaded_repositories_and_files=self.loaded_repos
            )
            documents = loader.load()

            # Assertions
            self.assertEqual(len(documents), 1)
            self.assertEqual(documents[0].metadata["source"], "user")
            self.assertIn(os.path.basename(temp_path), documents[0].metadata["ItemId"])
        finally:
            # Clean up the temporary file
            os.unlink(temp_path)


class TestRetrievalSystems(unittest.TestCase):
    """Test retrieval system components"""

    def setUp(self):
        self.docstore = DocumentStore()
        # Create some test documents
        self.test_docs = [
            Document(
                page_content="This is a test document about Python",
                metadata={"source": "test", "ItemId": "doc1", "doc_id": "1"},
            ),
            Document(
                page_content="This document discusses AI and machine learning",
                metadata={"source": "test", "ItemId": "doc2", "doc_id": "2"},
            ),
        ]
        for doc in self.test_docs:
            self.docstore.add_documents([doc])

        # Mock vector store
        self.mock_vectorstore = MagicMock()
        self.mock_vectorstore.similarity_search_with_relevance_scores.return_value = [
            (self.test_docs[0], 0.95),
            (self.test_docs[1], 0.85),
        ]

    def test_document_retrieval(self):
        # Test basic document retrieval
        retrieval = DocumentRetrieval(
            vectorstore=self.mock_vectorstore,
            docstore=self.docstore,
            search_kwargs={"k": 2},
        )

        results = retrieval._get_relevant_documents("test query")

        # Assertions
        self.assertEqual(len(results), 2)
        self.mock_vectorstore.similarity_search_with_relevance_scores.assert_called_once()

    def test_empty_retrieval(self):
        # Test empty retrieval
        retrieval = EmptyRetrieval()
        results = retrieval._get_relevant_documents("test query")

        # Assertions
        self.assertEqual(len(results), 0)

    @patch(
        "docu_bot.retrievals.query_alteration_retrieval.QueryAlterationDocumentRetrieval._get_alternate_queries"
    )
    def test_query_alteration_retrieval(self, mock_get_alternate_queries):
        # Set up mock return values
        mock_get_alternate_queries.return_value = ["test query", "python query"]

        # Test query alteration retrieval
        retrieval = QueryAlterationDocumentRetrieval(
            vectorstore=self.mock_vectorstore,
            docstore=self.docstore,
            search_kwargs={"k": 2},
        )

        results = retrieval._get_relevant_documents("test query")

        # Assertions
        self.assertEqual(len(results), 2)
        mock_get_alternate_queries.assert_called_once()


class TestStores(unittest.TestCase):
    """Test store components"""

    def test_document_store(self):
        # Test document store functionality
        docstore = DocumentStore()

        # Add documents
        test_docs = [
            Document(
                page_content="Test content 1",
                metadata={"source": "test", "ItemId": "doc1"},
            ),
            Document(
                page_content="Test content 2",
                metadata={"source": "test", "ItemId": "doc2"},
            ),
        ]
        docstore.add_documents(test_docs)

        # Retrieve documents
        retrieved_docs = docstore.get_documents(["doc1"])

        # Assertions
        self.assertEqual(len(retrieved_docs), 1)
        self.assertEqual(retrieved_docs[0].page_content, "Test content 1")

    @patch("docu_bot.stores.utils.Chroma")
    def test_loaded_vector_stores(self, mock_chroma):
        # Test loaded vector stores
        vector_stores = LoadedVectorStores()

        # Add a vector store
        mock_embeddings = MagicMock()
        vector_stores.get_or_create_vectorstore("test_id", mock_embeddings)

        # Assertions
        self.assertEqual(len(vector_stores._vectorstores), 1)
        self.assertIn("test_id", vector_stores._vectorstores)

    def test_multi_vector_store(self):
        # Test multi vector store
        mock_chroma_vectors = [MagicMock(), MagicMock()]

        # Configure the mocks
        for i, mock in enumerate(mock_chroma_vectors):
            mock.similarity_search_with_relevance_scores.return_value = [
                (Document(page_content=f"Test content {i}"), 0.9 - i * 0.1)
            ]

        # Create multi vector store
        multi_store = MultiVectorStore(chroma_vectors=mock_chroma_vectors)

        # Test search
        results = multi_store.similarity_search_with_relevance_scores("test query", k=2)

        # Assertions
        self.assertEqual(len(results), 2)
        for mock in mock_chroma_vectors:
            mock.similarity_search_with_relevance_scores.assert_called_once()


class TestEvaluation(unittest.TestCase):
    """Test evaluation components"""

    @patch("ragas.evaluation.evaluate")
    def test_evaluator(self, mock_evaluate):
        # Set up mock return values
        mock_result = MagicMock()
        mock_evaluate.return_value = mock_result

        # Create mock models
        mock_llm = MagicMock(spec=ChatOpenAI)
        mock_embeddings = MagicMock(spec=OpenAIEmbeddings)
        mock_retriever = MagicMock()

        # Setup test dataset
        test_data = pd.DataFrame(
            {
                "user_input": ["What is Python?"],
                "reference": ["Python is a programming language."],
                "reference_contexts": [
                    ["Python is a high-level programming language."]
                ],
            }
        )
        test_dataset = Testset.from_pandas(test_data)

        # Mock retriever invoke method
        mock_retriever.invoke.return_value = [
            Document(page_content="Python is a high-level programming language.")
        ]

        # Create evaluator
        evaluator = Evaluator(
            evaluator_llm=mock_llm, evaluator_embedding_model=mock_embeddings
        )

        # Test evaluation
        with patch(
            "langchain_core.runnables.base.RunnableSequence.invoke",
            return_value="Python is a programming language",
        ):
            eval_result, time_data = evaluator.evaluate_configuration(
                dataset=test_dataset,
                rag_llm=mock_llm,
                document_retriever=mock_retriever,
                use_tqdm=False,
            )

        # Assertions
        mock_evaluate.assert_called_once()
        self.assertEqual(eval_result, mock_result)
        self.assertEqual(len(time_data), 1)


class TestRAG(unittest.TestCase):
    """Test RAG components"""

    def setUp(self):
        self.mock_vectorstores = MagicMock(spec=LoadedVectorStores)
        self.mock_docstore = MagicMock(spec=DocumentStore)

    @patch("docu_bot.chat.answer_openai.DocumentRetrieval")
    @patch("docu_bot.chat.answer_openai.QueryAlterationDocumentRetrieval")
    @patch("docu_bot.chat.answer_openai.ContextQueryAlterationDocumentRetrieval")
    @patch("docu_bot.chat.answer_openai.GenerativeDocumentRetrieval")
    def test_prepare_retriever(
        self, mock_generative, mock_context_query, mock_query_alt, mock_doc_retrieval
    ):
        # Test prepare_retriever function
        long_branches = [("repo", "branch")]
        zip_files = ["test.zip"]

        # Configure mocks
        mock_retriever_instance = MagicMock()
        mock_doc_retrieval.return_value = mock_retriever_instance
        mock_query_alt.return_value = mock_retriever_instance
        mock_context_query.return_value = mock_retriever_instance
        mock_generative.return_value = mock_retriever_instance

        # Test default retrieval
        retriever = prepare_retriever(
            long_branches=long_branches,
            zip_files=zip_files,
            docstore=self.mock_docstore,
            loaded_vectorstores=self.mock_vectorstores,
            model_type="test-model",
            api_key="test-key",
        )

        # Assertions
        self.assertEqual(retriever, mock_retriever_instance)
        mock_doc_retrieval.assert_called_once()

        # Test different retrieval types
        prepare_retriever(
            long_branches=long_branches,
            zip_files=zip_files,
            docstore=self.mock_docstore,
            loaded_vectorstores=self.mock_vectorstores,
            model_type="test-model",
            api_key="test-key",
            retrieval_type=RETRIEVAL_TYPES.QUERY_ALTERATION,
        )
        mock_query_alt.assert_called_once()

    @patch("docu_bot.chat.answer_openai.prepare_retriever")
    def test_get_documents(self, mock_prepare_retriever):
        # Set up mock return values
        mock_retriever = MagicMock()
        mock_retriever.invoke.return_value = ["doc1", "doc2"]
        mock_prepare_retriever.return_value = mock_retriever

        # Test get_documents
        docs = get_documents(query="test query", retriever=mock_retriever)

        # Assertions
        self.assertEqual(docs, ["doc1", "doc2"])
        mock_retriever.invoke.assert_called_once_with("test query")

    @patch("docu_bot.chat.answer_openai.ChatOpenAI")
    def test_rag(self, mock_chat_openai):
        # Set up mock return values
        mock_chat_instance = MagicMock()
        mock_chat_instance.invoke.return_value = {"content": "Generated response"}
        mock_chat_openai.return_value = mock_chat_instance

        # Test rag function
        messages = [{"role": "user", "content": "What is Python?"}]
        documents = [Document(page_content="Python is a programming language.")]

        response = rag(
            messages=messages,
            documents=documents,
            model_type="test-model",
            api_key="test-key",
        )

        # Assertions
        self.assertEqual(len(response), 2)
        self.assertEqual(response[0], messages[0])
        self.assertEqual(response[1]["role"], "assistant")
        self.assertEqual(response[1]["content"], "Generated response")
        mock_chat_instance.invoke.assert_called_once()


if __name__ == "__main__":
    unittest.main()
